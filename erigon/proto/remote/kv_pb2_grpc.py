# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from erigon.proto.remote import kv_pb2 as remote_dot_kv__pb2
from erigon.proto.types import types_pb2 as types_dot_types__pb2


class KVStub(object):
    """Provides methods to access key-value data
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/remote.KV/Version',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=types_dot_types__pb2.VersionReply.FromString,
                )
        self.Tx = channel.stream_stream(
                '/remote.KV/Tx',
                request_serializer=remote_dot_kv__pb2.Cursor.SerializeToString,
                response_deserializer=remote_dot_kv__pb2.Pair.FromString,
                )
        self.StateChanges = channel.unary_stream(
                '/remote.KV/StateChanges',
                request_serializer=remote_dot_kv__pb2.StateChangeRequest.SerializeToString,
                response_deserializer=remote_dot_kv__pb2.StateChangeBatch.FromString,
                )
        self.Snapshots = channel.unary_unary(
                '/remote.KV/Snapshots',
                request_serializer=remote_dot_kv__pb2.SnapshotsRequest.SerializeToString,
                response_deserializer=remote_dot_kv__pb2.SnapshotsReply.FromString,
                )


class KVServicer(object):
    """Provides methods to access key-value data
    """

    def Version(self, request, context):
        """Version returns the service version number
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tx(self, request_iterator, context):
        """Tx exposes read-only transactions for the key-value store

        When tx open, client must receive 1 message from server with txID
        When cursor open, client must receive 1 message from server with cursorID
        Then only client can initiate messages from server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StateChanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Snapshots(self, request, context):
        """Snapshots returns list of current snapshot files. Then client can just open all of them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KVServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=types_dot_types__pb2.VersionReply.SerializeToString,
            ),
            'Tx': grpc.stream_stream_rpc_method_handler(
                    servicer.Tx,
                    request_deserializer=remote_dot_kv__pb2.Cursor.FromString,
                    response_serializer=remote_dot_kv__pb2.Pair.SerializeToString,
            ),
            'StateChanges': grpc.unary_stream_rpc_method_handler(
                    servicer.StateChanges,
                    request_deserializer=remote_dot_kv__pb2.StateChangeRequest.FromString,
                    response_serializer=remote_dot_kv__pb2.StateChangeBatch.SerializeToString,
            ),
            'Snapshots': grpc.unary_unary_rpc_method_handler(
                    servicer.Snapshots,
                    request_deserializer=remote_dot_kv__pb2.SnapshotsRequest.FromString,
                    response_serializer=remote_dot_kv__pb2.SnapshotsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'remote.KV', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KV(object):
    """Provides methods to access key-value data
    """

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remote.KV/Version',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            types_dot_types__pb2.VersionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Tx(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/remote.KV/Tx',
            remote_dot_kv__pb2.Cursor.SerializeToString,
            remote_dot_kv__pb2.Pair.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StateChanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/remote.KV/StateChanges',
            remote_dot_kv__pb2.StateChangeRequest.SerializeToString,
            remote_dot_kv__pb2.StateChangeBatch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Snapshots(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/remote.KV/Snapshots',
            remote_dot_kv__pb2.SnapshotsRequest.SerializeToString,
            remote_dot_kv__pb2.SnapshotsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
