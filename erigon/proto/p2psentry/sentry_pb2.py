# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: p2psentry/sentry.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from erigon.proto.types import types_pb2 as types_dot_types__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x16p2psentry/sentry.proto\x12\x06sentry\x1a\x1bgoogle/protobuf/empty.proto\x1a\x11types/types.proto\"B\n\x13OutboundMessageData\x12\x1d\n\x02id\x18\x01 \x01(\x0e\x32\x11.sentry.MessageId\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\"\\\n\x1cSendMessageByMinBlockRequest\x12)\n\x04\x64\x61ta\x18\x01 \x01(\x0b\x32\x1b.sentry.OutboundMessageData\x12\x11\n\tmin_block\x18\x02 \x01(\x04\"a\n\x16SendMessageByIdRequest\x12)\n\x04\x64\x61ta\x18\x01 \x01(\x0b\x32\x1b.sentry.OutboundMessageData\x12\x1c\n\x07peer_id\x18\x02 \x01(\x0b\x32\x0b.types.H512\"_\n\x1fSendMessageToRandomPeersRequest\x12)\n\x04\x64\x61ta\x18\x01 \x01(\x0b\x32\x1b.sentry.OutboundMessageData\x12\x11\n\tmax_peers\x18\x02 \x01(\x04\"\'\n\tSentPeers\x12\x1a\n\x05peers\x18\x01 \x03(\x0b\x32\x0b.types.H512\"Y\n\x13PenalizePeerRequest\x12\x1c\n\x07peer_id\x18\x01 \x01(\x0b\x32\x0b.types.H512\x12$\n\x07penalty\x18\x02 \x01(\x0e\x32\x13.sentry.PenaltyKind\"F\n\x13PeerMinBlockRequest\x12\x1c\n\x07peer_id\x18\x01 \x01(\x0b\x32\x0b.types.H512\x12\x11\n\tmin_block\x18\x02 \x01(\x04\"[\n\x0eInboundMessage\x12\x1d\n\x02id\x18\x01 \x01(\x0e\x32\x11.sentry.MessageId\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\x12\x1c\n\x07peer_id\x18\x03 \x01(\x0b\x32\x0b.types.H512\"4\n\x05\x46orks\x12\x1c\n\x07genesis\x18\x01 \x01(\x0b\x32\x0b.types.H256\x12\r\n\x05\x66orks\x18\x02 \x03(\x04\"\x9c\x01\n\nStatusData\x12\x12\n\nnetwork_id\x18\x01 \x01(\x04\x12%\n\x10total_difficulty\x18\x02 \x01(\x0b\x32\x0b.types.H256\x12\x1e\n\tbest_hash\x18\x03 \x01(\x0b\x32\x0b.types.H256\x12 \n\tfork_data\x18\x04 \x01(\x0b\x32\r.sentry.Forks\x12\x11\n\tmax_block\x18\x05 \x01(\x04\"\x10\n\x0eSetStatusReply\"4\n\x0eHandShakeReply\x12\"\n\x08protocol\x18\x01 \x01(\x0e\x32\x10.sentry.Protocol\"1\n\x0fMessagesRequest\x12\x1e\n\x03ids\x18\x01 \x03(\x0e\x32\x11.sentry.MessageId\",\n\nPeersReply\x12\x1e\n\x05peers\x18\x01 \x03(\x0b\x32\x0f.types.PeerInfo\"\x12\n\x10PeerCountRequest\"\x1f\n\x0ePeerCountReply\x12\r\n\x05\x63ount\x18\x01 \x01(\x04\"/\n\x0fPeerByIdRequest\x12\x1c\n\x07peer_id\x18\x01 \x01(\x0b\x32\x0b.types.H512\"<\n\rPeerByIdReply\x12\"\n\x04peer\x18\x01 \x01(\x0b\x32\x0f.types.PeerInfoH\x00\x88\x01\x01\x42\x07\n\x05_peer\"\x13\n\x11PeerEventsRequest\"\x86\x01\n\tPeerEvent\x12\x1c\n\x07peer_id\x18\x01 \x01(\x0b\x32\x0b.types.H512\x12/\n\x08\x65vent_id\x18\x02 \x01(\x0e\x32\x1d.sentry.PeerEvent.PeerEventId\"*\n\x0bPeerEventId\x12\x0b\n\x07\x43onnect\x10\x00\x12\x0e\n\nDisconnect\x10\x01*\xda\x05\n\tMessageId\x12\r\n\tSTATUS_65\x10\x00\x12\x18\n\x14GET_BLOCK_HEADERS_65\x10\x01\x12\x14\n\x10\x42LOCK_HEADERS_65\x10\x02\x12\x13\n\x0f\x42LOCK_HASHES_65\x10\x03\x12\x17\n\x13GET_BLOCK_BODIES_65\x10\x04\x12\x13\n\x0f\x42LOCK_BODIES_65\x10\x05\x12\x14\n\x10GET_NODE_DATA_65\x10\x06\x12\x10\n\x0cNODE_DATA_65\x10\x07\x12\x13\n\x0fGET_RECEIPTS_65\x10\x08\x12\x0f\n\x0bRECEIPTS_65\x10\t\x12\x17\n\x13NEW_BLOCK_HASHES_65\x10\n\x12\x10\n\x0cNEW_BLOCK_65\x10\x0b\x12\x13\n\x0fTRANSACTIONS_65\x10\x0c\x12$\n NEW_POOLED_TRANSACTION_HASHES_65\x10\r\x12\x1e\n\x1aGET_POOLED_TRANSACTIONS_65\x10\x0e\x12\x1a\n\x16POOLED_TRANSACTIONS_65\x10\x0f\x12\r\n\tSTATUS_66\x10\x11\x12\x17\n\x13NEW_BLOCK_HASHES_66\x10\x12\x12\x10\n\x0cNEW_BLOCK_66\x10\x13\x12\x13\n\x0fTRANSACTIONS_66\x10\x14\x12$\n NEW_POOLED_TRANSACTION_HASHES_66\x10\x15\x12\x18\n\x14GET_BLOCK_HEADERS_66\x10\x16\x12\x17\n\x13GET_BLOCK_BODIES_66\x10\x17\x12\x14\n\x10GET_NODE_DATA_66\x10\x18\x12\x13\n\x0fGET_RECEIPTS_66\x10\x19\x12\x1e\n\x1aGET_POOLED_TRANSACTIONS_66\x10\x1a\x12\x14\n\x10\x42LOCK_HEADERS_66\x10\x1b\x12\x13\n\x0f\x42LOCK_BODIES_66\x10\x1c\x12\x10\n\x0cNODE_DATA_66\x10\x1d\x12\x0f\n\x0bRECEIPTS_66\x10\x1e\x12\x1a\n\x16POOLED_TRANSACTIONS_66\x10\x1f*\x17\n\x0bPenaltyKind\x12\x08\n\x04Kick\x10\x00*+\n\x08Protocol\x12\t\n\x05\x45TH65\x10\x00\x12\t\n\x05\x45TH66\x10\x01\x12\t\n\x05\x45TH67\x10\x02\x32\xa3\x07\n\x06Sentry\x12\x37\n\tSetStatus\x12\x12.sentry.StatusData\x1a\x16.sentry.SetStatusReply\x12\x43\n\x0cPenalizePeer\x12\x1b.sentry.PenalizePeerRequest\x1a\x16.google.protobuf.Empty\x12\x43\n\x0cPeerMinBlock\x12\x1b.sentry.PeerMinBlockRequest\x1a\x16.google.protobuf.Empty\x12;\n\tHandShake\x12\x16.google.protobuf.Empty\x1a\x16.sentry.HandShakeReply\x12P\n\x15SendMessageByMinBlock\x12$.sentry.SendMessageByMinBlockRequest\x1a\x11.sentry.SentPeers\x12\x44\n\x0fSendMessageById\x12\x1e.sentry.SendMessageByIdRequest\x1a\x11.sentry.SentPeers\x12V\n\x18SendMessageToRandomPeers\x12\'.sentry.SendMessageToRandomPeersRequest\x1a\x11.sentry.SentPeers\x12\x42\n\x10SendMessageToAll\x12\x1b.sentry.OutboundMessageData\x1a\x11.sentry.SentPeers\x12=\n\x08Messages\x12\x17.sentry.MessagesRequest\x1a\x16.sentry.InboundMessage0\x01\x12\x33\n\x05Peers\x12\x16.google.protobuf.Empty\x1a\x12.sentry.PeersReply\x12=\n\tPeerCount\x12\x18.sentry.PeerCountRequest\x1a\x16.sentry.PeerCountReply\x12:\n\x08PeerById\x12\x17.sentry.PeerByIdRequest\x1a\x15.sentry.PeerByIdReply\x12<\n\nPeerEvents\x12\x19.sentry.PeerEventsRequest\x1a\x11.sentry.PeerEvent0\x01\x12\x38\n\x08NodeInfo\x12\x16.google.protobuf.Empty\x1a\x14.types.NodeInfoReplyB\x11Z\x0f./sentry;sentryb\x06proto3')

_MESSAGEID = DESCRIPTOR.enum_types_by_name['MessageId']
MessageId = enum_type_wrapper.EnumTypeWrapper(_MESSAGEID)
_PENALTYKIND = DESCRIPTOR.enum_types_by_name['PenaltyKind']
PenaltyKind = enum_type_wrapper.EnumTypeWrapper(_PENALTYKIND)
_PROTOCOL = DESCRIPTOR.enum_types_by_name['Protocol']
Protocol = enum_type_wrapper.EnumTypeWrapper(_PROTOCOL)
STATUS_65 = 0
GET_BLOCK_HEADERS_65 = 1
BLOCK_HEADERS_65 = 2
BLOCK_HASHES_65 = 3
GET_BLOCK_BODIES_65 = 4
BLOCK_BODIES_65 = 5
GET_NODE_DATA_65 = 6
NODE_DATA_65 = 7
GET_RECEIPTS_65 = 8
RECEIPTS_65 = 9
NEW_BLOCK_HASHES_65 = 10
NEW_BLOCK_65 = 11
TRANSACTIONS_65 = 12
NEW_POOLED_TRANSACTION_HASHES_65 = 13
GET_POOLED_TRANSACTIONS_65 = 14
POOLED_TRANSACTIONS_65 = 15
STATUS_66 = 17
NEW_BLOCK_HASHES_66 = 18
NEW_BLOCK_66 = 19
TRANSACTIONS_66 = 20
NEW_POOLED_TRANSACTION_HASHES_66 = 21
GET_BLOCK_HEADERS_66 = 22
GET_BLOCK_BODIES_66 = 23
GET_NODE_DATA_66 = 24
GET_RECEIPTS_66 = 25
GET_POOLED_TRANSACTIONS_66 = 26
BLOCK_HEADERS_66 = 27
BLOCK_BODIES_66 = 28
NODE_DATA_66 = 29
RECEIPTS_66 = 30
POOLED_TRANSACTIONS_66 = 31
Kick = 0
ETH65 = 0
ETH66 = 1
ETH67 = 2


_OUTBOUNDMESSAGEDATA = DESCRIPTOR.message_types_by_name['OutboundMessageData']
_SENDMESSAGEBYMINBLOCKREQUEST = DESCRIPTOR.message_types_by_name['SendMessageByMinBlockRequest']
_SENDMESSAGEBYIDREQUEST = DESCRIPTOR.message_types_by_name['SendMessageByIdRequest']
_SENDMESSAGETORANDOMPEERSREQUEST = DESCRIPTOR.message_types_by_name['SendMessageToRandomPeersRequest']
_SENTPEERS = DESCRIPTOR.message_types_by_name['SentPeers']
_PENALIZEPEERREQUEST = DESCRIPTOR.message_types_by_name['PenalizePeerRequest']
_PEERMINBLOCKREQUEST = DESCRIPTOR.message_types_by_name['PeerMinBlockRequest']
_INBOUNDMESSAGE = DESCRIPTOR.message_types_by_name['InboundMessage']
_FORKS = DESCRIPTOR.message_types_by_name['Forks']
_STATUSDATA = DESCRIPTOR.message_types_by_name['StatusData']
_SETSTATUSREPLY = DESCRIPTOR.message_types_by_name['SetStatusReply']
_HANDSHAKEREPLY = DESCRIPTOR.message_types_by_name['HandShakeReply']
_MESSAGESREQUEST = DESCRIPTOR.message_types_by_name['MessagesRequest']
_PEERSREPLY = DESCRIPTOR.message_types_by_name['PeersReply']
_PEERCOUNTREQUEST = DESCRIPTOR.message_types_by_name['PeerCountRequest']
_PEERCOUNTREPLY = DESCRIPTOR.message_types_by_name['PeerCountReply']
_PEERBYIDREQUEST = DESCRIPTOR.message_types_by_name['PeerByIdRequest']
_PEERBYIDREPLY = DESCRIPTOR.message_types_by_name['PeerByIdReply']
_PEEREVENTSREQUEST = DESCRIPTOR.message_types_by_name['PeerEventsRequest']
_PEEREVENT = DESCRIPTOR.message_types_by_name['PeerEvent']
_PEEREVENT_PEEREVENTID = _PEEREVENT.enum_types_by_name['PeerEventId']
OutboundMessageData = _reflection.GeneratedProtocolMessageType('OutboundMessageData', (_message.Message,), {
  'DESCRIPTOR' : _OUTBOUNDMESSAGEDATA,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.OutboundMessageData)
  })
_sym_db.RegisterMessage(OutboundMessageData)

SendMessageByMinBlockRequest = _reflection.GeneratedProtocolMessageType('SendMessageByMinBlockRequest', (_message.Message,), {
  'DESCRIPTOR' : _SENDMESSAGEBYMINBLOCKREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.SendMessageByMinBlockRequest)
  })
_sym_db.RegisterMessage(SendMessageByMinBlockRequest)

SendMessageByIdRequest = _reflection.GeneratedProtocolMessageType('SendMessageByIdRequest', (_message.Message,), {
  'DESCRIPTOR' : _SENDMESSAGEBYIDREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.SendMessageByIdRequest)
  })
_sym_db.RegisterMessage(SendMessageByIdRequest)

SendMessageToRandomPeersRequest = _reflection.GeneratedProtocolMessageType('SendMessageToRandomPeersRequest', (_message.Message,), {
  'DESCRIPTOR' : _SENDMESSAGETORANDOMPEERSREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.SendMessageToRandomPeersRequest)
  })
_sym_db.RegisterMessage(SendMessageToRandomPeersRequest)

SentPeers = _reflection.GeneratedProtocolMessageType('SentPeers', (_message.Message,), {
  'DESCRIPTOR' : _SENTPEERS,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.SentPeers)
  })
_sym_db.RegisterMessage(SentPeers)

PenalizePeerRequest = _reflection.GeneratedProtocolMessageType('PenalizePeerRequest', (_message.Message,), {
  'DESCRIPTOR' : _PENALIZEPEERREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PenalizePeerRequest)
  })
_sym_db.RegisterMessage(PenalizePeerRequest)

PeerMinBlockRequest = _reflection.GeneratedProtocolMessageType('PeerMinBlockRequest', (_message.Message,), {
  'DESCRIPTOR' : _PEERMINBLOCKREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeerMinBlockRequest)
  })
_sym_db.RegisterMessage(PeerMinBlockRequest)

InboundMessage = _reflection.GeneratedProtocolMessageType('InboundMessage', (_message.Message,), {
  'DESCRIPTOR' : _INBOUNDMESSAGE,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.InboundMessage)
  })
_sym_db.RegisterMessage(InboundMessage)

Forks = _reflection.GeneratedProtocolMessageType('Forks', (_message.Message,), {
  'DESCRIPTOR' : _FORKS,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.Forks)
  })
_sym_db.RegisterMessage(Forks)

StatusData = _reflection.GeneratedProtocolMessageType('StatusData', (_message.Message,), {
  'DESCRIPTOR' : _STATUSDATA,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.StatusData)
  })
_sym_db.RegisterMessage(StatusData)

SetStatusReply = _reflection.GeneratedProtocolMessageType('SetStatusReply', (_message.Message,), {
  'DESCRIPTOR' : _SETSTATUSREPLY,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.SetStatusReply)
  })
_sym_db.RegisterMessage(SetStatusReply)

HandShakeReply = _reflection.GeneratedProtocolMessageType('HandShakeReply', (_message.Message,), {
  'DESCRIPTOR' : _HANDSHAKEREPLY,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.HandShakeReply)
  })
_sym_db.RegisterMessage(HandShakeReply)

MessagesRequest = _reflection.GeneratedProtocolMessageType('MessagesRequest', (_message.Message,), {
  'DESCRIPTOR' : _MESSAGESREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.MessagesRequest)
  })
_sym_db.RegisterMessage(MessagesRequest)

PeersReply = _reflection.GeneratedProtocolMessageType('PeersReply', (_message.Message,), {
  'DESCRIPTOR' : _PEERSREPLY,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeersReply)
  })
_sym_db.RegisterMessage(PeersReply)

PeerCountRequest = _reflection.GeneratedProtocolMessageType('PeerCountRequest', (_message.Message,), {
  'DESCRIPTOR' : _PEERCOUNTREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeerCountRequest)
  })
_sym_db.RegisterMessage(PeerCountRequest)

PeerCountReply = _reflection.GeneratedProtocolMessageType('PeerCountReply', (_message.Message,), {
  'DESCRIPTOR' : _PEERCOUNTREPLY,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeerCountReply)
  })
_sym_db.RegisterMessage(PeerCountReply)

PeerByIdRequest = _reflection.GeneratedProtocolMessageType('PeerByIdRequest', (_message.Message,), {
  'DESCRIPTOR' : _PEERBYIDREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeerByIdRequest)
  })
_sym_db.RegisterMessage(PeerByIdRequest)

PeerByIdReply = _reflection.GeneratedProtocolMessageType('PeerByIdReply', (_message.Message,), {
  'DESCRIPTOR' : _PEERBYIDREPLY,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeerByIdReply)
  })
_sym_db.RegisterMessage(PeerByIdReply)

PeerEventsRequest = _reflection.GeneratedProtocolMessageType('PeerEventsRequest', (_message.Message,), {
  'DESCRIPTOR' : _PEEREVENTSREQUEST,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeerEventsRequest)
  })
_sym_db.RegisterMessage(PeerEventsRequest)

PeerEvent = _reflection.GeneratedProtocolMessageType('PeerEvent', (_message.Message,), {
  'DESCRIPTOR' : _PEEREVENT,
  '__module__' : 'p2psentry.sentry_pb2'
  # @@protoc_insertion_point(class_scope:sentry.PeerEvent)
  })
_sym_db.RegisterMessage(PeerEvent)

_SENTRY = DESCRIPTOR.services_by_name['Sentry']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\017./sentry;sentry'
  _MESSAGEID._serialized_start=1442
  _MESSAGEID._serialized_end=2172
  _PENALTYKIND._serialized_start=2174
  _PENALTYKIND._serialized_end=2197
  _PROTOCOL._serialized_start=2199
  _PROTOCOL._serialized_end=2242
  _OUTBOUNDMESSAGEDATA._serialized_start=82
  _OUTBOUNDMESSAGEDATA._serialized_end=148
  _SENDMESSAGEBYMINBLOCKREQUEST._serialized_start=150
  _SENDMESSAGEBYMINBLOCKREQUEST._serialized_end=242
  _SENDMESSAGEBYIDREQUEST._serialized_start=244
  _SENDMESSAGEBYIDREQUEST._serialized_end=341
  _SENDMESSAGETORANDOMPEERSREQUEST._serialized_start=343
  _SENDMESSAGETORANDOMPEERSREQUEST._serialized_end=438
  _SENTPEERS._serialized_start=440
  _SENTPEERS._serialized_end=479
  _PENALIZEPEERREQUEST._serialized_start=481
  _PENALIZEPEERREQUEST._serialized_end=570
  _PEERMINBLOCKREQUEST._serialized_start=572
  _PEERMINBLOCKREQUEST._serialized_end=642
  _INBOUNDMESSAGE._serialized_start=644
  _INBOUNDMESSAGE._serialized_end=735
  _FORKS._serialized_start=737
  _FORKS._serialized_end=789
  _STATUSDATA._serialized_start=792
  _STATUSDATA._serialized_end=948
  _SETSTATUSREPLY._serialized_start=950
  _SETSTATUSREPLY._serialized_end=966
  _HANDSHAKEREPLY._serialized_start=968
  _HANDSHAKEREPLY._serialized_end=1020
  _MESSAGESREQUEST._serialized_start=1022
  _MESSAGESREQUEST._serialized_end=1071
  _PEERSREPLY._serialized_start=1073
  _PEERSREPLY._serialized_end=1117
  _PEERCOUNTREQUEST._serialized_start=1119
  _PEERCOUNTREQUEST._serialized_end=1137
  _PEERCOUNTREPLY._serialized_start=1139
  _PEERCOUNTREPLY._serialized_end=1170
  _PEERBYIDREQUEST._serialized_start=1172
  _PEERBYIDREQUEST._serialized_end=1219
  _PEERBYIDREPLY._serialized_start=1221
  _PEERBYIDREPLY._serialized_end=1281
  _PEEREVENTSREQUEST._serialized_start=1283
  _PEEREVENTSREQUEST._serialized_end=1302
  _PEEREVENT._serialized_start=1305
  _PEEREVENT._serialized_end=1439
  _PEEREVENT_PEEREVENTID._serialized_start=1397
  _PEEREVENT_PEEREVENTID._serialized_end=1439
  _SENTRY._serialized_start=2245
  _SENTRY._serialized_end=3176
# @@protoc_insertion_point(module_scope)
