# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.web3 import common_pb2 as web3_dot_common__pb2
from proto.web3 import trace_pb2 as web3_dot_trace__pb2


class TraceApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/web3.TraceApi/Call',
                request_serializer=web3_dot_trace__pb2.CallRequests.SerializeToString,
                response_deserializer=web3_dot_trace__pb2.FullTraces.FromString,
                )
        self.Block = channel.unary_unary(
                '/web3.TraceApi/Block',
                request_serializer=web3_dot_common__pb2.BlockId.SerializeToString,
                response_deserializer=web3_dot_trace__pb2.OptionalTracesWithLocation.FromString,
                )
        self.BlockTransactions = channel.unary_unary(
                '/web3.TraceApi/BlockTransactions',
                request_serializer=web3_dot_trace__pb2.TraceBlockRequest.SerializeToString,
                response_deserializer=web3_dot_trace__pb2.OptionalFullTracesWithTransactionHashes.FromString,
                )
        self.Transaction = channel.unary_unary(
                '/web3.TraceApi/Transaction',
                request_serializer=web3_dot_trace__pb2.TraceTransactionRequest.SerializeToString,
                response_deserializer=web3_dot_trace__pb2.FullTrace.FromString,
                )
        self.Filter = channel.unary_stream(
                '/web3.TraceApi/Filter',
                request_serializer=web3_dot_trace__pb2.FilterRequest.SerializeToString,
                response_deserializer=web3_dot_trace__pb2.TraceWithLocation.FromString,
                )


class TraceApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Block(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockTransactions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Filter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TraceApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=web3_dot_trace__pb2.CallRequests.FromString,
                    response_serializer=web3_dot_trace__pb2.FullTraces.SerializeToString,
            ),
            'Block': grpc.unary_unary_rpc_method_handler(
                    servicer.Block,
                    request_deserializer=web3_dot_common__pb2.BlockId.FromString,
                    response_serializer=web3_dot_trace__pb2.OptionalTracesWithLocation.SerializeToString,
            ),
            'BlockTransactions': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockTransactions,
                    request_deserializer=web3_dot_trace__pb2.TraceBlockRequest.FromString,
                    response_serializer=web3_dot_trace__pb2.OptionalFullTracesWithTransactionHashes.SerializeToString,
            ),
            'Transaction': grpc.unary_unary_rpc_method_handler(
                    servicer.Transaction,
                    request_deserializer=web3_dot_trace__pb2.TraceTransactionRequest.FromString,
                    response_serializer=web3_dot_trace__pb2.FullTrace.SerializeToString,
            ),
            'Filter': grpc.unary_stream_rpc_method_handler(
                    servicer.Filter,
                    request_deserializer=web3_dot_trace__pb2.FilterRequest.FromString,
                    response_serializer=web3_dot_trace__pb2.TraceWithLocation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'web3.TraceApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TraceApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/web3.TraceApi/Call',
            web3_dot_trace__pb2.CallRequests.SerializeToString,
            web3_dot_trace__pb2.FullTraces.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Block(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/web3.TraceApi/Block',
            web3_dot_common__pb2.BlockId.SerializeToString,
            web3_dot_trace__pb2.OptionalTracesWithLocation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockTransactions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/web3.TraceApi/BlockTransactions',
            web3_dot_trace__pb2.TraceBlockRequest.SerializeToString,
            web3_dot_trace__pb2.OptionalFullTracesWithTransactionHashes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Transaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/web3.TraceApi/Transaction',
            web3_dot_trace__pb2.TraceTransactionRequest.SerializeToString,
            web3_dot_trace__pb2.FullTrace.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Filter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/web3.TraceApi/Filter',
            web3_dot_trace__pb2.FilterRequest.SerializeToString,
            web3_dot_trace__pb2.TraceWithLocation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
