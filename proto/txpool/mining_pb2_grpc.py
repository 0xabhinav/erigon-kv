# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto.txpool import mining_pb2 as txpool_dot_mining__pb2
from proto.types import types_pb2 as types_dot_types__pb2


class MiningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Version = channel.unary_unary(
                '/txpool.Mining/Version',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=types_dot_types__pb2.VersionReply.FromString,
                )
        self.OnPendingBlock = channel.unary_stream(
                '/txpool.Mining/OnPendingBlock',
                request_serializer=txpool_dot_mining__pb2.OnPendingBlockRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.OnPendingBlockReply.FromString,
                )
        self.OnMinedBlock = channel.unary_stream(
                '/txpool.Mining/OnMinedBlock',
                request_serializer=txpool_dot_mining__pb2.OnMinedBlockRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.OnMinedBlockReply.FromString,
                )
        self.OnPendingLogs = channel.unary_stream(
                '/txpool.Mining/OnPendingLogs',
                request_serializer=txpool_dot_mining__pb2.OnPendingLogsRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.OnPendingLogsReply.FromString,
                )
        self.GetWork = channel.unary_unary(
                '/txpool.Mining/GetWork',
                request_serializer=txpool_dot_mining__pb2.GetWorkRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.GetWorkReply.FromString,
                )
        self.SubmitWork = channel.unary_unary(
                '/txpool.Mining/SubmitWork',
                request_serializer=txpool_dot_mining__pb2.SubmitWorkRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.SubmitWorkReply.FromString,
                )
        self.SubmitHashRate = channel.unary_unary(
                '/txpool.Mining/SubmitHashRate',
                request_serializer=txpool_dot_mining__pb2.SubmitHashRateRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.SubmitHashRateReply.FromString,
                )
        self.HashRate = channel.unary_unary(
                '/txpool.Mining/HashRate',
                request_serializer=txpool_dot_mining__pb2.HashRateRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.HashRateReply.FromString,
                )
        self.Mining = channel.unary_unary(
                '/txpool.Mining/Mining',
                request_serializer=txpool_dot_mining__pb2.MiningRequest.SerializeToString,
                response_deserializer=txpool_dot_mining__pb2.MiningReply.FromString,
                )


class MiningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Version(self, request, context):
        """Version returns the service version number
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnPendingBlock(self, request, context):
        """subscribe to pending blocks event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnMinedBlock(self, request, context):
        """subscribe to mined blocks event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OnPendingLogs(self, request, context):
        """subscribe to pending blocks event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWork(self, request, context):
        """GetWork returns a work package for external miner.

        The work package consists of 3 strings:
        result[0] - 32 bytes hex encoded current block header pow-hash
        result[1] - 32 bytes hex encoded seed hash used for DAG
        result[2] - 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
        result[3] - hex encoded block number
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitWork(self, request, context):
        """SubmitWork can be used by external miner to submit their POW solution.
        It returns an indication if the work was accepted.
        Note either an invalid solution, a stale work a non-existent work will return false.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitHashRate(self, request, context):
        """SubmitHashRate can be used for remote miners to submit their hash rate.
        This enables the node to report the combined hash rate of all miners
        which submit work through this node.

        It accepts the miner hash rate and an identifier which must be unique
        between nodes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HashRate(self, request, context):
        """HashRate returns the current hashrate for local CPU miner and remote miner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mining(self, request, context):
        """Mining returns an indication if this node is currently mining and it's mining configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MiningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Version': grpc.unary_unary_rpc_method_handler(
                    servicer.Version,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=types_dot_types__pb2.VersionReply.SerializeToString,
            ),
            'OnPendingBlock': grpc.unary_stream_rpc_method_handler(
                    servicer.OnPendingBlock,
                    request_deserializer=txpool_dot_mining__pb2.OnPendingBlockRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.OnPendingBlockReply.SerializeToString,
            ),
            'OnMinedBlock': grpc.unary_stream_rpc_method_handler(
                    servicer.OnMinedBlock,
                    request_deserializer=txpool_dot_mining__pb2.OnMinedBlockRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.OnMinedBlockReply.SerializeToString,
            ),
            'OnPendingLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.OnPendingLogs,
                    request_deserializer=txpool_dot_mining__pb2.OnPendingLogsRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.OnPendingLogsReply.SerializeToString,
            ),
            'GetWork': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWork,
                    request_deserializer=txpool_dot_mining__pb2.GetWorkRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.GetWorkReply.SerializeToString,
            ),
            'SubmitWork': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitWork,
                    request_deserializer=txpool_dot_mining__pb2.SubmitWorkRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.SubmitWorkReply.SerializeToString,
            ),
            'SubmitHashRate': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitHashRate,
                    request_deserializer=txpool_dot_mining__pb2.SubmitHashRateRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.SubmitHashRateReply.SerializeToString,
            ),
            'HashRate': grpc.unary_unary_rpc_method_handler(
                    servicer.HashRate,
                    request_deserializer=txpool_dot_mining__pb2.HashRateRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.HashRateReply.SerializeToString,
            ),
            'Mining': grpc.unary_unary_rpc_method_handler(
                    servicer.Mining,
                    request_deserializer=txpool_dot_mining__pb2.MiningRequest.FromString,
                    response_serializer=txpool_dot_mining__pb2.MiningReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'txpool.Mining', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mining(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/txpool.Mining/Version',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            types_dot_types__pb2.VersionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnPendingBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/txpool.Mining/OnPendingBlock',
            txpool_dot_mining__pb2.OnPendingBlockRequest.SerializeToString,
            txpool_dot_mining__pb2.OnPendingBlockReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnMinedBlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/txpool.Mining/OnMinedBlock',
            txpool_dot_mining__pb2.OnMinedBlockRequest.SerializeToString,
            txpool_dot_mining__pb2.OnMinedBlockReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OnPendingLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/txpool.Mining/OnPendingLogs',
            txpool_dot_mining__pb2.OnPendingLogsRequest.SerializeToString,
            txpool_dot_mining__pb2.OnPendingLogsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/txpool.Mining/GetWork',
            txpool_dot_mining__pb2.GetWorkRequest.SerializeToString,
            txpool_dot_mining__pb2.GetWorkReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitWork(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/txpool.Mining/SubmitWork',
            txpool_dot_mining__pb2.SubmitWorkRequest.SerializeToString,
            txpool_dot_mining__pb2.SubmitWorkReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitHashRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/txpool.Mining/SubmitHashRate',
            txpool_dot_mining__pb2.SubmitHashRateRequest.SerializeToString,
            txpool_dot_mining__pb2.SubmitHashRateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HashRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/txpool.Mining/HashRate',
            txpool_dot_mining__pb2.HashRateRequest.SerializeToString,
            txpool_dot_mining__pb2.HashRateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Mining(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/txpool.Mining/Mining',
            txpool_dot_mining__pb2.MiningRequest.SerializeToString,
            txpool_dot_mining__pb2.MiningReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
